<?php

namespace Gpupo\CamelSpiderBundle\Entity;

use Doctrine\ORM\EntityRepository,
    Gpupo\CamelSpiderReaderBundle\Entity\InterfaceNode;
/**
 * SubscriptionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SubscriptionRepository extends EntityRepository implements InterfaceNode
{
    public function findByActiveSubscriptions()
    {
        return $this->findBy(array('isActive'=> true));
    }

    /**
     * Find Schuduled Subscriptions to be used in cron tasks
     *
     * Filter
     * - day of the week
     * - since past hour plus one minute till now
     *   example: from 10:01 (past hour) till 11:23 (now)
     *
     * @return array
     */
    public function findByScheduledSubscriptions()
    {
        $now  = new \DateTime();
        $past = new \DateTime();
        $past->sub(new \DateInterval('PT1H'));
        $qb = $this->createQueryBuilder('s');
        $qb->join('s.schedules', 'h')
                ->where($qb->expr()->between('h.timeSchedule', ':past', ':now'))
                ->andWhere($qb->expr()->eq('s.isActive', true) )
                ->andWhere(
                    $qb
                        ->expr()
                        ->eq('h.' . $this->getDayField(date('w')), true)
                )
                ->setParameter('past', $past->format('H:01'))
                ->setParameter('now', $now->format('H:i'));

        return $qb->getQuery()->getResult();
    }

    protected function getDayField($dayInt)
    {
        $dayArray = array(
            0 => 'sun',
            1 => 'mon',
            2 => 'tue',
            3 => 'wed',
            4 => 'thu',
            5 => 'fri',
            6 => 'sat',
        );

        return isset($dayArray[$dayInt]) ? $dayArray[$dayInt] : false;
    }


    public function findForMenu()
    {
        return $this->findBy(array('isActive'=> true), array('name'=>'ASC'));
    }

    public function getStats(array $subscriptions)
    {
        $ids = array();
        $stats = array(
            'lastCapture' => array(),
            'countNews'   => array()
        );

        foreach($subscriptions as $subscription) {
            $ids[] = $subscription->getId();
        }

        $qb1 = $this->getEntityManager()
                //->getRepository('FunparAdminBundle:Log')
                ->getRepository('GpupoCamelSpiderBundle:News')
                ->createQueryBuilder('n');

        $date = new \DateTime('NOW');
        $date->sub(new \DateInterval('P30D'));
        $date = $date->format('Ymd') . '000000';

        $statsResults1 =
            $qb1->select($qb1->expr()->count('n.id'). ' as total')
                ->addSelect('s.id as sid')
                ->join('n.subscription', 's')
                ->andWhere($qb1->expr()->in('s.id', $ids))
                ->andWhere($qb1->expr()->gte('n.date', '?1'))
                ->addGroupBy('s.id')
                ->setParameter(1,$date)
                ->getQuery()
                ->getResult();

        foreach ($statsResults1 as $result) {
            $stats['countNews'][$result['sid']] = $result['total'];
        }

        $qb2 = $this->getEntityManager()
                ->getRepository('FunparAdminBundle:Log')
                ->createQueryBuilder('l');
        $statsResults2 =
            $qb2->select($qb2->expr()->max('l.createdAt'). ' as lastCapture')
                ->addSelect('s.id as sid')
                ->join('l.subscription', 's')
                ->andWhere($qb2->expr()->in('s.id', $ids))
                ->andWhere($qb2->expr()->eq('l.type', "'CAPTURE'"))
                ->addGroupBy('s.id')
                ->getQuery()
                ->getResult();

        foreach ($statsResults2 as $result) {
            $stats['lastCapture'][$result['sid']] = $result['lastCapture'];
        }

        return $stats;
    }

    public function removeAndMoveRelated(Subscription $removedSubscription, $movedSubscription)
    {

        // Moving related News
        $qb1 = $this->getEntityManager()->createQueryBuilder();
        $qb1->update('Gpupo\CamelSpiderBundle\Entity\News n')
            ->set('n.subscription', '?1')
            ->add('where', $qb1->expr()->eq('n.subscription', '?2'))
            ->setParameter(1, $movedSubscription)
            ->setParameter(2, $removedSubscription->getId())
            ->getQuery()->getResult();

        // Moving related Logs
        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $qb2->update('Funpar\AdminBundle\Entity\Log l')
            ->set('l.subscription', '?1')
            ->add('where', $qb2->expr()->eq('l.subscription', '?2'))
            ->setParameter(1, $movedSubscription)
            ->setParameter(2, $removedSubscription->getId())
            ->getQuery()->getResult();

        // Moving related RawNews
        $qb3 = $this->getEntityManager()->createQueryBuilder();
        $qb3->update('Gpupo\CamelSpiderBundle\Entity\RawNews r')
            ->set('r.subscription', '?1')
            ->add('where', $qb3->expr()->eq('r.subscription', '?2'))
            ->setParameter(1, $movedSubscription)
            ->setParameter(2, $removedSubscription->getId())
            ->getQuery()->getResult();

        $this->getEntityManager()->flush();
        $this->getEntityManager()->remove($removedSubscription);
        $this->getEntityManager()->flush();
    }

    public function removeAndClearRelated(Subscription $removedSubscription)
    {

        // Clearing related News
        $qbNews = $this->getEntityManager()
                ->getRepository('Gpupo\CamelSpiderBundle\Entity\News')
                ->createQueryBuilder('n');
        $qbNews->select('n.id')
                ->add('where', $qbNews->expr()->eq('n.subscription', '?1'));

        // Clearing related NewsVotes
        $qb1 = $this->getEntityManager()->createQueryBuilder();
        $qb1->delete('Gpupo\CamelSpiderBundle\Entity\NewsVote v')
            ->add('where', $qb1->expr()->in('v.news', $qbNews->getDQL()))
            ->setParameter(1, $removedSubscription->getId());
        echo $qb1->getQuery()->getSQL();
        $qb1->getQuery()->getResult();

        // Clearing related News
        $qb2 = $this->getEntityManager()->createQueryBuilder();
        $qb2->delete('Gpupo\CamelSpiderBundle\Entity\News n')
            ->add('where', $qb2->expr()->eq('n.subscription', '?1'))
            ->setParameter(1, $removedSubscription->getId())
            ->getQuery()->getResult();

        // Clearing related Logs
        $qb3 = $this->getEntityManager()->createQueryBuilder();
        $qb3->delete('Funpar\AdminBundle\Entity\Log l')
            ->add('where', $qb3->expr()->eq('l.subscription', '?1'))
            ->setParameter(1, $removedSubscription->getId())
            ->getQuery()->getResult();

        // Clearing related RawNews
        $qb4 = $this->getEntityManager()->createQueryBuilder();
        $qb4->delete('Gpupo\CamelSpiderBundle\Entity\RawNews r')
            ->add('where', $qb4->expr()->eq('r.subscription', '?1'))
            ->setParameter(1, $removedSubscription->getId())
            ->getQuery()->getResult();

        $this->getEntityManager()->flush();
        $this->getEntityManager()->remove($removedSubscription);
        $this->getEntityManager()->flush();
    }

}

