<?php

namespace Gpupo\CamelSpiderBundle\Entity;

use Doctrine\ORM\EntityRepository,
    CamelSpider\Entity\InterfaceLink,
    CamelSpider\Entity\Document;
/**
 * NewsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class NewsRepository extends EntityRepository
{

    public function queryBuilder($limits = array('offset' => 0,'limit' => 50))
    {
        $qb = $this->createQueryBuilder('a');
        $qb->where('a.moderation = :moderation')
            ->add('orderBy', 'a.createdAt DESC')
            ->setFirstResult($limits['offset'])
            ->setMaxResults($limits['limit'])
            ->setParameters(array('moderation' => 'APROVED'));
        return $qb;
    }

    public function findLatest()
    {
        return $this->queryBuilder()->getQuery();
    }

    public function findByType($type, $id)
    {
        $q = $this->queryBuilder();
        $q->andWhere('a.'.strtolower($type) . ' = :tid')
            ->setParameter('tid', $id);
        return $q->getQuery();
    }

    public function searchByKeyword($keyword)
    {
        $q = $this->queryBuilder();
        $q->andwhere($q->expr()->orx(
            $q->expr()->like('a.content', $q->expr()->literal('%' . $keyword . '%')),
            $q->expr()->like('a.title', $q->expr()->literal('%' . $keyword . '%'))
        ));

        return $q->getQuery();
    }

    public function searchByLink(InterfaceLink $link)
    {
        $qb = $this->createQueryBuilder('a');
        $pars = array('href'    => $link->getHref());
        $document = $link->getDocument();
        $where = 'a.uri = :href';

        if ($document instanceof Document) {
            $where .= ' or a.title = :title or a.slug = :slug';
            $pars['slug']  = $document->getSlug();
            $pars['title'] = $document->getTitle();
        }

        $qb->where($where)->setParameters($pars);

        return $qb;
    }

    public function countByLink(InterfaceLink $link)
    {

        $r = $this->searchByLink($link)
            ->getQuery()
            ->getArrayResult();

        return is_null($r) ? 0 : count($r);
    }


}
